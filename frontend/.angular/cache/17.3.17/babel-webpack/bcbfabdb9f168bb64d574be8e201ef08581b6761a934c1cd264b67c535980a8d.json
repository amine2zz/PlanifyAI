{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CalendarService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api';\n    this.eventsSubject = new BehaviorSubject([]);\n    this.events$ = this.eventsSubject.asObservable();\n    this.loadEvents();\n  }\n  // Event Management\n  getEvents() {\n    return this.http.get(`${this.apiUrl}/events`);\n  }\n  getEventsByDate(date) {\n    return this.http.get(`${this.apiUrl}/events/date/${date}`);\n  }\n  createEvent(event) {\n    return this.http.post(`${this.apiUrl}/events`, event);\n  }\n  updateEvent(id, event) {\n    return this.http.put(`${this.apiUrl}/events/${id}`, event);\n  }\n  deleteEvent(id) {\n    return this.http.delete(`${this.apiUrl}/events/${id}`);\n  }\n  // AI Features\n  getAISuggestions() {\n    return this.http.get(`${this.apiUrl}/ai/suggestions`);\n  }\n  getOptimalSchedule(preferences) {\n    return this.http.post(`${this.apiUrl}/ai/optimize-schedule`, preferences);\n  }\n  analyzeProductivityPatterns() {\n    return this.http.get(`${this.apiUrl}/ai/productivity-analysis`);\n  }\n  getSmartReminders() {\n    return this.http.get(`${this.apiUrl}/ai/smart-reminders`);\n  }\n  // Calendar Intelligence\n  findOptimalMeetingTime(participants, duration, preferences) {\n    return this.http.post(`${this.apiUrl}/ai/find-meeting-time`, {\n      participants,\n      duration,\n      preferences\n    });\n  }\n  predictEventDuration(eventType, description) {\n    return this.http.post(`${this.apiUrl}/ai/predict-duration`, {\n      eventType,\n      description\n    });\n  }\n  getConflictResolutions(eventId) {\n    return this.http.get(`${this.apiUrl}/ai/conflict-resolutions/${eventId}`);\n  }\n  // Time Management\n  getTimeBlocks(date) {\n    return this.http.get(`${this.apiUrl}/time-blocks/${date}`);\n  }\n  createTimeBlock(timeBlock) {\n    return this.http.post(`${this.apiUrl}/time-blocks`, timeBlock);\n  }\n  // Analytics\n  getProductivityMetrics(startDate, endDate) {\n    return this.http.get(`${this.apiUrl}/analytics/productivity`, {\n      params: {\n        startDate,\n        endDate\n      }\n    });\n  }\n  getCalendarInsights() {\n    return this.http.get(`${this.apiUrl}/analytics/insights`);\n  }\n  // AI Voice Processing\n  processVoiceCommand(transcript) {\n    return this.http.post(`${this.apiUrl}/ai/process-voice`, {\n      transcript\n    });\n  }\n  getChatResponse(message) {\n    return this.http.post(`${this.apiUrl}/ai/chat`, {\n      message\n    });\n  }\n  getPersonalizedInsights() {\n    return this.http.get(`${this.apiUrl}/ai/personalized-insights`);\n  }\n  // Utility Methods\n  loadEvents() {\n    this.getEvents().subscribe(events => {\n      this.eventsSubject.next(events);\n    });\n  }\n  refreshEvents() {\n    this.loadEvents();\n  }\n  // Local Storage for offline functionality\n  saveToLocalStorage(key, data) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n  getFromLocalStorage(key) {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n  // Date Utilities\n  formatDate(date) {\n    return date.toISOString().split('T')[0];\n  }\n  formatDateTime(date) {\n    return date.toISOString();\n  }\n  parseDate(dateString) {\n    return new Date(dateString);\n  }\n  isToday(date) {\n    const today = new Date();\n    return date.toDateString() === today.toDateString();\n  }\n  isSameWeek(date1, date2) {\n    const startOfWeek1 = new Date(date1);\n    startOfWeek1.setDate(date1.getDate() - date1.getDay());\n    const startOfWeek2 = new Date(date2);\n    startOfWeek2.setDate(date2.getDate() - date2.getDay());\n    return startOfWeek1.toDateString() === startOfWeek2.toDateString();\n  }\n  getDaysInMonth(year, month) {\n    return new Date(year, month + 1, 0).getDate();\n  }\n  getWeekNumber(date) {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  }\n  static {\n    this.ɵfac = function CalendarService_Factory(t) {\n      return new (t || CalendarService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CalendarService,\n      factory: CalendarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","CalendarService","constructor","http","apiUrl","eventsSubject","events$","asObservable","loadEvents","getEvents","get","getEventsByDate","date","createEvent","event","post","updateEvent","id","put","deleteEvent","delete","getAISuggestions","getOptimalSchedule","preferences","analyzeProductivityPatterns","getSmartReminders","findOptimalMeetingTime","participants","duration","predictEventDuration","eventType","description","getConflictResolutions","eventId","getTimeBlocks","createTimeBlock","timeBlock","getProductivityMetrics","startDate","endDate","params","getCalendarInsights","processVoiceCommand","transcript","getChatResponse","message","getPersonalizedInsights","subscribe","events","next","refreshEvents","saveToLocalStorage","key","data","localStorage","setItem","JSON","stringify","getFromLocalStorage","getItem","parse","formatDate","toISOString","split","formatDateTime","parseDate","dateString","Date","isToday","today","toDateString","isSameWeek","date1","date2","startOfWeek1","setDate","getDate","getDay","startOfWeek2","getDaysInMonth","year","month","getWeekNumber","firstDayOfYear","getFullYear","pastDaysOfYear","getTime","Math","ceil","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Amine Ghariani\\OneDrive\\Bureau\\PlanifyAI\\PlanifyAI\\frontend\\src\\app\\services\\calendar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nexport interface Event {\n  id?: number;\n  title: string;\n  description?: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high';\n  isRecurring?: boolean;\n  recurringPattern?: string;\n}\n\nexport interface AISuggestion {\n  id: string;\n  type: 'schedule' | 'optimize' | 'reminder' | 'pattern';\n  title: string;\n  description: string;\n  suggestedAction: any;\n  confidence: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalendarService {\n  private apiUrl = 'http://localhost:5000/api';\n  private eventsSubject = new BehaviorSubject<Event[]>([]);\n  public events$ = this.eventsSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadEvents();\n  }\n\n  // Event Management\n  getEvents(): Observable<Event[]> {\n    return this.http.get<Event[]>(`${this.apiUrl}/events`);\n  }\n\n  getEventsByDate(date: string): Observable<Event[]> {\n    return this.http.get<Event[]>(`${this.apiUrl}/events/date/${date}`);\n  }\n\n  createEvent(event: Event): Observable<Event> {\n    return this.http.post<Event>(`${this.apiUrl}/events`, event);\n  }\n\n  updateEvent(id: number, event: Event): Observable<Event> {\n    return this.http.put<Event>(`${this.apiUrl}/events/${id}`, event);\n  }\n\n  deleteEvent(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/events/${id}`);\n  }\n\n  // AI Features\n  getAISuggestions(): Observable<AISuggestion[]> {\n    return this.http.get<AISuggestion[]>(`${this.apiUrl}/ai/suggestions`);\n  }\n\n  getOptimalSchedule(preferences: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/ai/optimize-schedule`, preferences);\n  }\n\n  analyzeProductivityPatterns(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/ai/productivity-analysis`);\n  }\n\n  getSmartReminders(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/ai/smart-reminders`);\n  }\n\n  // Calendar Intelligence\n  findOptimalMeetingTime(participants: string[], duration: number, preferences: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/ai/find-meeting-time`, {\n      participants,\n      duration,\n      preferences\n    });\n  }\n\n  predictEventDuration(eventType: string, description: string): Observable<number> {\n    return this.http.post<number>(`${this.apiUrl}/ai/predict-duration`, {\n      eventType,\n      description\n    });\n  }\n\n  getConflictResolutions(eventId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/ai/conflict-resolutions/${eventId}`);\n  }\n\n  // Time Management\n  getTimeBlocks(date: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/time-blocks/${date}`);\n  }\n\n  createTimeBlock(timeBlock: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/time-blocks`, timeBlock);\n  }\n\n  // Analytics\n  getProductivityMetrics(startDate: string, endDate: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/analytics/productivity`, {\n      params: { startDate, endDate }\n    });\n  }\n\n  getCalendarInsights(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/analytics/insights`);\n  }\n\n  // AI Voice Processing\n  processVoiceCommand(transcript: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/ai/process-voice`, { transcript });\n  }\n\n  getChatResponse(message: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/ai/chat`, { message });\n  }\n\n  getPersonalizedInsights(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/ai/personalized-insights`);\n  }\n\n  // Utility Methods\n  private loadEvents() {\n    this.getEvents().subscribe(events => {\n      this.eventsSubject.next(events);\n    });\n  }\n\n  refreshEvents() {\n    this.loadEvents();\n  }\n\n  // Local Storage for offline functionality\n  saveToLocalStorage(key: string, data: any) {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  getFromLocalStorage(key: string): any {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  }\n\n  // Date Utilities\n  formatDate(date: Date): string {\n    return date.toISOString().split('T')[0];\n  }\n\n  formatDateTime(date: Date): string {\n    return date.toISOString();\n  }\n\n  parseDate(dateString: string): Date {\n    return new Date(dateString);\n  }\n\n  isToday(date: Date): boolean {\n    const today = new Date();\n    return date.toDateString() === today.toDateString();\n  }\n\n  isSameWeek(date1: Date, date2: Date): boolean {\n    const startOfWeek1 = new Date(date1);\n    startOfWeek1.setDate(date1.getDate() - date1.getDay());\n    \n    const startOfWeek2 = new Date(date2);\n    startOfWeek2.setDate(date2.getDate() - date2.getDay());\n    \n    return startOfWeek1.toDateString() === startOfWeek2.toDateString();\n  }\n\n  getDaysInMonth(year: number, month: number): number {\n    return new Date(year, month + 1, 0).getDate();\n  }\n\n  getWeekNumber(date: Date): number {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}